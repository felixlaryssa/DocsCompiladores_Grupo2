{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Apresenta\u00e7\u00e3o do projeto","text":"<p> Projeto de uma compilador python para C elaborado como parte da disciplina \"Compiladores\", ministrada pelo professor Sergio Freitas. O sistema \u00e9 desenvolvido pela equipe Runtime Terrors e que tem como objetivo criar um commpilador utilizando as ferramentas Flex e Bison. </p>"},{"location":"#como-utilizar-o-compilador","title":"Como utilizar o compilador?","text":"<p> A princ\u00edpio, para informa\u00e7\u00f5es sobre como rodar o projeto e utilizar o compilador, utilize as instru\u00e7\u00f5es descritas no README.md do reposit\u00f3rio. </p>"},{"location":"#integrantes","title":"Integrantes","text":"<sub>Caio Duarte</sub> <sub>Ludmila Aysha</sub> <sub>Rafael Welz</sub> <sub>Isaque Camargos</sub> <sub>Laryssa Felix</sub>"},{"location":"#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"<p><p>Tabela 1: Hist\u00f3rico de vers\u00f5es</p></p> Vers\u00e3o Descri\u00e7\u00e3o Autor Data Revisor 1.0 Cria\u00e7\u00e3o da documento Caio Duarte 01/10/2025 Laryssa Felix <p> <p>     Fonte:      Caio Duarte,      Ludmila Aysha,      Rafael Welz,      Isaque Camargos,      Laryssa Felix, 2025.   </p> <p></p>"},{"location":"Desenvolvimento_tecnico/parser/","title":"Parser","text":""},{"location":"Desenvolvimento_tecnico/parser/#1-introducao","title":"1. Introdu\u00e7\u00e3o","text":"<p>O parser (analisador sint\u00e1tico) tem como objetivo analisar a sequ\u00eancia de tokens gerada pelo analisador l\u00e9xico e verificar se ela est\u00e1 em conformidade com a gram\u00e1tica da linguagem Python definida para este projeto.</p> <p>Este compilador implementa um subconjunto de Python, focando, at\u00e9 o momento, em constru\u00e7\u00f5es fundamentais como:</p> <ul> <li>Atribui\u00e7\u00f5es</li> <li>Express\u00f5es aritm\u00e9ticas</li> <li>Chamadas de fun\u00e7\u00e3o</li> <li>Blocos com indenta\u00e7\u00e3o</li> </ul> <p>Outras implement\u00e7\u00f5es futuras est\u00e3o descritas no t\u00f3pico 6. Pr\u00f3ximos Passos deste documento</p> <p>Ap\u00f3s a an\u00e1lise sint\u00e1tica, o c\u00f3digo reconhecido servir\u00e1 de base para tradu\u00e7\u00e3o para c\u00f3digo C, etapa posterior do compilador.</p>"},{"location":"Desenvolvimento_tecnico/parser/#2-papel-do-parser-no-compilador-python-c","title":"2. Papel do Parser no Compilador Python \u2192 C","text":"<p>O pipeline geral do compilador funciona da seguinte forma:</p> <p>C\u00f3digo Python \u2192 An\u00e1lise L\u00e9xica (Flex) \u2192 An\u00e1lise Sint\u00e1tica (Bison) \u2192 Representa\u00e7\u00e3o Intermedi\u00e1ria / AST \u2192 Gera\u00e7\u00e3o de C\u00f3digo C \u2192 C\u00f3digo C resultante</p> <p>A fun\u00e7\u00e3o do parser \u00e9, portanto:</p> <ul> <li>Detectar erros sint\u00e1ticos e report\u00e1-los com precis\u00e3o.</li> <li>Construir a estrutura sint\u00e1tica do programa em Python.</li> <li>Preparar dados para a etapa de gera\u00e7\u00e3o de c\u00f3digo C.</li> </ul>"},{"location":"Desenvolvimento_tecnico/parser/#3-estrutura-do-arquivo-parsery","title":"3. Estrutura do Arquivo parser.y","text":"<p>O arquivo <code>parser/parser.y</code> cont\u00e9m:</p> <ul> <li>Cabe\u00e7alho em C<ul> <li>Inclus\u00e3o de bibliotecas padr\u00e3o (<code>stdio.h</code>, <code>stdlib.h</code>).</li> <li>Defini\u00e7\u00f5es de <code>yylex()</code> e <code>yyerror()</code>.</li> <li>Acesso a <code>yytext</code> e <code>yylineno</code> para mensagens de erro detalhadas.</li> </ul> </li> <li>Declara\u00e7\u00f5es do Bison<ul> <li>Tokens recebidos do lexer (definidos em <code>lexer.l</code>).</li> <li>Regras de preced\u00eancia de operadores (+, -, *, /, =).</li> <li>Configura\u00e7\u00e3o de rastreamento (<code>%define parse.trace</code>) e localiza\u00e7\u00e3o de erros (<code>%locations</code>).</li> </ul> </li> <li>Gram\u00e1tica<ul> <li>Regras que definem a sintaxe do subconjunto de Python aceito.</li> <li>Estruturas como atribui\u00e7\u00e3o m\u00faltipla, express\u00f5es encadeadas e blocos indentados.</li> </ul> </li> <li>Fun\u00e7\u00f5es auxiliares<ul> <li>Implementa\u00e7\u00e3o de <code>yyerror()</code> para reportar erros sint\u00e1ticos amig\u00e1veis.</li> <li>Fun\u00e7\u00e3o <code>main()</code> para testar o parser de forma isolada.</li> </ul> </li> </ul>"},{"location":"Desenvolvimento_tecnico/parser/#4-gramatica-implementada","title":"4. Gram\u00e1tica Implementada","text":"<p>A gram\u00e1tica foi inspirada na sintaxe de Python, adaptada para fins did\u00e1ticos. Alguns dos n\u00e3o-terminais principais:</p> N\u00e3o-terminal Descri\u00e7\u00e3o programa Raiz da gram\u00e1tica; conjunto de comandos comando Pode ser atribui\u00e7\u00e3o, chamada de fun\u00e7\u00e3o, express\u00e3o, bloco ou newline atribuicao Suporta atribui\u00e7\u00f5es simples e encadeadas expressao Express\u00f5es aritm\u00e9ticas com operadores infixos bloco In\u00edcio de conjunto indentado de comandos, simulando blocos Python chamada_funcao Reconhece chamadas com e sem argumentos <p>Exemplo de regra de express\u00e3o:</p> <pre><code>expressao:\n    chamada_funcao\n  | expressao TOKEN_OPERADOR_MAIS expressao\n  | expressao TOKEN_OPERADOR_MENOS expressao\n  | expressao TOKEN_OPERADOR_MULTIPLICACAO expressao\n  | expressao TOKEN_OPERADOR_DIVISAO expressao\n  ;\n</code></pre>"},{"location":"Desenvolvimento_tecnico/parser/#5-executando-o-parser-individualmente","title":"5. Executando o Parser Individualmente","text":"<p>Durante o desenvolvimento, \u00e9 poss\u00edvel compilar e executar apenas a etapa do parser para verificar se a an\u00e1lise sint\u00e1tica est\u00e1 correta.</p> <p>Os comandos s\u00e3o:</p> <p>1. Acessar a pasta <code>src</code></p> <pre><code>cd src\n</code></pre> <p>2. Gerar arquivos do parser com Bison</p> <pre><code>bison -d -o \"parser/parser.tab.c\" \"parser/parser.y\"\n</code></pre> <p>3. Gerar arquivos do lexer com Flex</p> <pre><code>flex -o \"lexer/lex.yy.c\" \"lexer/lexer.l\"\n</code></pre> <p>4. Compilar parser + lexer</p> <pre><code>gcc parser/parser.tab.c lexer/lex.yy.c -o parser/compilador -lfl\n</code></pre> <p>5. Executar testes de parser</p> <pre><code>parser/compilador &lt; tests/sintatico/&lt;test&gt;\n</code></pre> <p>Onde <code>&lt;test&gt;</code> representa um arquivo de teste contendo c\u00f3digo Python v\u00e1lido ou inv\u00e1lido, localizado em tests/parser.</p> <ul> <li>Exemplo de teste v\u00e1lido (<code>tests/sintatico/parser_01_declaracao.py</code>):</li> </ul> <pre><code>a= 1\na ,b,c=2,3,4\nd=e= f=5\n</code></pre> <ul> <li>Sa\u00edda esperada:</li> </ul> <pre><code>Iniciando parser...\nParsing conclu\u00eddo com sucesso!\n</code></pre> <ul> <li>Exemplo de teste com erro (<code>tests/sintatico/parser_04_erro1Declaracao.py</code>):</li> </ul> <pre><code>a=1=b=c \n</code></pre> <ul> <li>Sa\u00edda esperada:</li> </ul> <pre><code>Iniciando parser...\nERRO (linha 1): syntax error pr\u00f3ximo de '='\nParsing interrompido por erro.\n</code></pre>"},{"location":"Desenvolvimento_tecnico/parser/#6-proximos-passos","title":"6. Pr\u00f3ximos Passos","text":"<ul> <li>Ampliar a gram\u00e1tica para incluir:<ul> <li>Condicionais (if, elif, else)</li> <li>La\u00e7os (while, for)</li> <li>Defini\u00e7\u00e3o de fun\u00e7\u00f5es</li> <li>Declara\u00e7\u00e3o e uso de listas -\u00a0Dicion\u00e1rios</li> </ul> </li> <li>Associar a\u00e7\u00f5es sem\u00e2nticas \u00e0s regras do parser para gerar \u00e1rvores sint\u00e1ticas abstratas (AST) ou diretamente c\u00f3digo C.</li> <li>Implementar mensagens de erro mais espec\u00edficas para cada regra gramatical.</li> <li>Traduzir estruturas Python para C na etapa seguinte do compilador.</li> </ul>"},{"location":"Desenvolvimento_tecnico/parser/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"Vers\u00e3o Descri\u00e7\u00e3o Autor Data Revisor 1.0 Cria\u00e7\u00e3o da v1 da documenta\u00e7\u00e3o do parser Ludmila Nunes 01/10/2025 Isaque Camargos"},{"location":"Dificuldades/dificuldades/","title":"Dificuldades","text":""},{"location":"Dificuldades/dificuldades/#teste","title":"teste","text":""},{"location":"Escopo/escopo/","title":"Escopo Geral do Compilador","text":"<p>O compilador deste projeto foi delimitado de forma clara, de modo a assegurar que sua implementa\u00e7\u00e3o seja realiz\u00e1vel dentro do tempo dispon\u00edvel. As funcionalidades selecionadas foram definidas levando em conta tanto a import\u00e2ncia para a utiliza\u00e7\u00e3o pr\u00e1tica da linguagem Python quanto a possibilidade de convers\u00e3o adequada para a linguagem C.</p>"},{"location":"Escopo/escopo/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<p>O compilador oferece suporte aos seguintes tipos de dados:</p> <ul> <li>int;</li> <li>float;</li> <li>double;</li> <li>char;</li> <li>string;</li> </ul>"},{"location":"Escopo/escopo/#operacoes-e-expressoes","title":"Opera\u00e7\u00f5es e Express\u00f5es","text":"<p>As opera\u00e7\u00f5es implementadas incluem:</p> <ul> <li> <p>Opera\u00e7\u00f5es aritm\u00e9ticas b\u00e1sicas: adi\u00e7\u00e3o (+), subtra\u00e7\u00e3o (-), multiplica\u00e7\u00e3o (*), divis\u00e3o (/) e m\u00f3dulo (%)</p> </li> <li> <p>Operadores relacionais(de compara\u00e7\u00e3o): ==, !=, &lt;, &lt;=, &gt;, &gt;=</p> </li> <li> <p>Operadores l\u00f3gicos: and, or, not (traduzidos para &amp;&amp;, || e ! em C)</p> </li> </ul>"},{"location":"Escopo/escopo/#entrada-e-saida","title":"Entrada e Sa\u00edda","text":"<p>S\u00e3o suportadas as seguintes fun\u00e7\u00f5es de entrada e sa\u00edda:</p> <p><code>print</code> \u2014 para exibir valores na sa\u00edda padr\u00e3o</p> <p><code>scan</code> \u2014 para leitura de valores da entrada padr\u00e3o</p>"},{"location":"Escopo/escopo/#estruturas-de-controle","title":"Estruturas de Controle","text":"<p>O compilador reconhece e traduz as seguintes estruturas de controle de fluxo:</p> <ul> <li> <p>Condicionais: if, elif, else</p> </li> <li> <p>La\u00e7os de repeti\u00e7\u00e3o: for, while</p> </li> </ul>"},{"location":"Escopo/escopo/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>Por fim, tamb\u00e9m est\u00e1 inclu\u00eddo no escopo o suporte \u00e0 defini\u00e7\u00e3o e chamada de fun\u00e7\u00f5es, permitindo reutiliza\u00e7\u00e3o de trechos l\u00f3gicos.</p> <p></p>"},{"location":"Escopo/escopo/#escopo-do-primeiro-ponto-de-controle","title":"Escopo do Primeiro Ponto de Controle","text":"<p>Neste primeiro ponto de controle do projeto, j\u00e1 foi poss\u00edvel implementar parte significativa das funcionalidades previstas para o compilador. A seguir, descrevemos o que foi conclu\u00eddo at\u00e9 o momento, separando os avan\u00e7os alcan\u00e7ados no analisador l\u00e9xico e no analisador sint\u00e1tico.</p>"},{"location":"Escopo/escopo/#lexico","title":"L\u00e9xico","text":"<p>A etapa l\u00e9xica est\u00e1 completa, sendo capaz de reconhecer:</p> <ul> <li>Vari\u00e1veis</li> <li>Estruturas condicionais</li> <li>La\u00e7os de repeti\u00e7\u00e3o</li> <li>Tipos de dados</li> </ul> <p>Al\u00e9m disso, o l\u00e9xico j\u00e1 trata mensagens de erro e contempla casos de teste espec\u00edficos.</p>"},{"location":"Escopo/escopo/#sintatico","title":"Sint\u00e1tico","text":"<p>No analisador sint\u00e1tico, j\u00e1 foram definidas as regras para:</p> <ul> <li>Express\u00f5es matem\u00e1ticas</li> <li>Atribui\u00e7\u00e3o de vari\u00e1veis</li> <li>Chamadas de fun\u00e7\u00f5es</li> <li>In\u00edcio da estrutura de indenta\u00e7\u00e3o</li> </ul> <p>Tamb\u00e9m foram incorporadas regras para mensagens de erro e casos de teste.</p>"},{"location":"Escopo/escopo/#pendencias","title":"Pend\u00eancias","text":"<p>Ainda falta implementar no sint\u00e1tico:</p> <ul> <li>Condicionais: <code>if</code>, <code>elif</code>, <code>else</code></li> <li>La\u00e7os: <code>while</code>, <code>for</code></li> <li>Defini\u00e7\u00e3o de fun\u00e7\u00f5es</li> <li>Declara\u00e7\u00e3o e uso de listas</li> <li>Declara\u00e7\u00e3o e uso de dicion\u00e1rios</li> </ul> <p>Al\u00e9m disso, \u00e9 necess\u00e1rio adicionar mais regras e estruturar corretamente a indenta\u00e7\u00e3o para permitir a implementa\u00e7\u00e3o completa de la\u00e7os e condicionais.</p>"},{"location":"Escopo/escopo/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"<p> Tabela 1: Hist\u00f3rico de vers\u00f5es </p> Vers\u00e3o Descri\u00e7\u00e3o Autor Data Revisor 1.0 Cria\u00e7\u00e3o do documento Laryssa Felix 01/10/2025 Caio Duarte <p> Fonte: Caio Duarte,  Ludmila Aysha,  Rafael Welz,  Isaque Camargos,  Laryssa Felix, 2025. </p>"},{"location":"Metodologia/metodologia/","title":"Metodologia","text":"<p>Para a organiza\u00e7\u00e3o do trabalho, a equipe adotou uma metodologia baseada em Kanban, com as tarefas divididas em colunas que representam seu status: \"A Fazer\", \"Em Andamento\" e \"Conclu\u00eddo\". Cada atividade possui uma data de entrega previamente definida, permitindo o acompanhamento do progresso, a prioriza\u00e7\u00e3o das tarefas e a identifica\u00e7\u00e3o de poss\u00edveis gargalos no desenvolvimento. Todas as decis\u00f5es t\u00e9cnicas e altera\u00e7\u00f5es importantes s\u00e3o registradas e documentadas no reposit\u00f3rio do GitHub.</p> <p> </p> <p>O projeto \u00e9 composto pelas seguintes atividades principais:</p> <p>1. Defini\u00e7\u00e3o da gram\u00e1tica e do escopo da linguagem Python suportada pelo compilador</p> <p>2. An\u00e1lise l\u00e9xica, respons\u00e1vel pelo reconhecimento de tokens, vari\u00e1veis, tipos, estruturas condicionais, la\u00e7os e mensagens de erro</p> <p>3. An\u00e1lise sint\u00e1tica (parser), respons\u00e1vel por interpretar a estrutura do c\u00f3digo, express\u00f5es matem\u00e1ticas, atribui\u00e7\u00e3o de vari\u00e1veis, chamadas de fun\u00e7\u00f5es e in\u00edcio da indenta\u00e7\u00e3o. Ainda faltam ser implementadas regras completas para condicionais, la\u00e7os, fun\u00e7\u00f5es, listas e dicion\u00e1rios</p> <p>4. An\u00e1lise sem\u00e2ntica e constru\u00e7\u00e3o da \u00e1rvore sint\u00e1tica abstrata (AST)</p> <p>5. Gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio e tradu\u00e7\u00e3o para C</p> <p>6. Testes e valida\u00e7\u00e3o utilizando casos pr\u00e1ticos para garantir o correto funcionamento do compilador</p> <p>7. Documenta\u00e7\u00e3o cont\u00ednua, incluindo planejamento, justificativas t\u00e9cnicas, hist\u00f3rico de vers\u00f5es e registro de dificuldades encontradas</p> <p> </p>"},{"location":"Metodologia/metodologia/#historico-de-versoes","title":"Hist\u00f3rico de Vers\u00f5es","text":"<p> Tabela 1: Hist\u00f3rico de vers\u00f5es </p> Vers\u00e3o Descri\u00e7\u00e3o Autor Data Revisor 1.0 Cria\u00e7\u00e3o do documento Laryssa Felix 01/10/2025 Caio Duarte <p> Fonte: Caio Duarte,  Ludmila Aysha,  Rafael Welz,  Isaque Camargos,  Laryssa Felix, 2025. </p>"}]}